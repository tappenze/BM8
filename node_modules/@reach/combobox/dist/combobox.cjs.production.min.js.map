{"version":3,"file":"combobox.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/combobox!\n *\n * Accessible combobox (autocomplete or autosuggest) component for React.\n *\n * A combobox is the combination of an `<input type=\"text\"/>` and a list. The\n * list is designed to help the user arrive at a value, but the value does not\n * necessarily have to come from that list. Don't think of it like a\n * `<select/>`, but more of an `<input type=\"text\"/>` with some suggestions. You\n * can, however, validate that the value comes from the list, that's up to your\n * app.\n *\n * ???: navigate w/ arrows, then hit backspace: should it delete the\n *      autocompleted text or the old value the user had typed?!\n *\n * @see Docs     https://reach.tech/combobox\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/combobox\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#combobox\n */\n\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  createNamedContext,\n  forwardRefWithAs,\n  getOwnerDocument,\n  isFunction,\n  makeId,\n  noop,\n  useCheckStyles,\n  useForkedRef,\n  useIsomorphicLayoutEffect,\n  useLazyRef,\n  useUpdateEffect,\n  wrapEvent,\n} from \"@reach/utils\";\nimport {\n  createDescendantContext,\n  DescendantProvider,\n  useDescendant,\n  useDescendants,\n  useDescendantsInit,\n} from \"@reach/descendants\";\nimport { findAll } from \"highlight-words-core\";\nimport { useId } from \"@reach/auto-id\";\nimport { Popover, positionMatchWidth } from \"@reach/popover\";\n\nimport type { PopoverProps } from \"@reach/popover\";\nimport type { Descendant } from \"@reach/descendants\";\n\n////////////////////////////////////////////////////////////////////////////////\n// States\n\n// Nothing going on, waiting for the user to type or use the arrow keys\nconst IDLE = \"IDLE\";\n\n// The component is suggesting options as the user types\nconst SUGGESTING = \"SUGGESTING\";\n\n// The user is using the keyboard to navigate the list, not typing\nconst NAVIGATING = \"NAVIGATING\";\n\n// The user is interacting with arbitrary elements inside the popup that\n// are not ComboboxInputs\nconst INTERACTING = \"INTERACTING\";\n\n////////////////////////////////////////////////////////////////////////////////\n// Events\n\n// User cleared the value w/ backspace, but input still has focus\nconst CLEAR = \"CLEAR\";\n\n// User is typing\nconst CHANGE = \"CHANGE\";\n\n// Initial input value change handler for syncing user state with state machine\n// Prevents initial change from sending the user to the NAVIGATING state\n// https://github.com/reach/reach-ui/issues/464\nconst INITIAL_CHANGE = \"INITIAL_CHANGE\";\n\n// User is navigating w/ the keyboard\nconst NAVIGATE = \"NAVIGATE\";\n\n// User can be navigating with keyboard and then click instead, we want the\n// value from the click, not the current nav item\nconst SELECT_WITH_KEYBOARD = \"SELECT_WITH_KEYBOARD\";\nconst SELECT_WITH_CLICK = \"SELECT_WITH_CLICK\";\n\n// Pretty self-explanatory, user can hit escape or blur to close the popover\nconst ESCAPE = \"ESCAPE\";\nconst BLUR = \"BLUR\";\n\n// The user left the input to interact with arbitrary elements inside the popup\nconst INTERACT = \"INTERACT\";\n\nconst FOCUS = \"FOCUS\";\n\nconst OPEN_WITH_BUTTON = \"OPEN_WITH_BUTTON\";\n\nconst CLOSE_WITH_BUTTON = \"CLOSE_WITH_BUTTON\";\n\n////////////////////////////////////////////////////////////////////////////////\nconst stateChart: StateChart = {\n  initial: IDLE,\n  states: {\n    [IDLE]: {\n      on: {\n        [BLUR]: IDLE,\n        [CLEAR]: IDLE,\n        [CHANGE]: SUGGESTING,\n        [INITIAL_CHANGE]: IDLE,\n        [FOCUS]: SUGGESTING,\n        [NAVIGATE]: NAVIGATING,\n        [OPEN_WITH_BUTTON]: SUGGESTING,\n      },\n    },\n    [SUGGESTING]: {\n      on: {\n        [CHANGE]: SUGGESTING,\n        [FOCUS]: SUGGESTING,\n        [NAVIGATE]: NAVIGATING,\n        [CLEAR]: IDLE,\n        [ESCAPE]: IDLE,\n        [BLUR]: IDLE,\n        [SELECT_WITH_CLICK]: IDLE,\n        [INTERACT]: INTERACTING,\n        [CLOSE_WITH_BUTTON]: IDLE,\n      },\n    },\n    [NAVIGATING]: {\n      on: {\n        [CHANGE]: SUGGESTING,\n        [FOCUS]: SUGGESTING,\n        [CLEAR]: IDLE,\n        [BLUR]: IDLE,\n        [ESCAPE]: IDLE,\n        [NAVIGATE]: NAVIGATING,\n        [SELECT_WITH_CLICK]: IDLE,\n        [SELECT_WITH_KEYBOARD]: IDLE,\n        [CLOSE_WITH_BUTTON]: IDLE,\n        [INTERACT]: INTERACTING,\n      },\n    },\n    [INTERACTING]: {\n      on: {\n        [CLEAR]: IDLE,\n        [CHANGE]: SUGGESTING,\n        [FOCUS]: SUGGESTING,\n        [BLUR]: IDLE,\n        [ESCAPE]: IDLE,\n        [NAVIGATE]: NAVIGATING,\n        [CLOSE_WITH_BUTTON]: IDLE,\n        [SELECT_WITH_CLICK]: IDLE,\n      },\n    },\n  },\n};\n\nconst reducer: Reducer = (data: StateData, event: MachineEvent) => {\n  const nextState = { ...data, lastEventType: event.type };\n  switch (event.type) {\n    case CHANGE:\n    case INITIAL_CHANGE:\n      return {\n        ...nextState,\n        navigationValue: null,\n        value: event.value,\n      };\n    case NAVIGATE:\n    case OPEN_WITH_BUTTON:\n      return {\n        ...nextState,\n        navigationValue: findNavigationValue(nextState, event),\n      };\n    case CLEAR:\n      return {\n        ...nextState,\n        value: \"\",\n        navigationValue: null,\n      };\n    case BLUR:\n    case ESCAPE:\n      return {\n        ...nextState,\n        navigationValue: null,\n      };\n    case SELECT_WITH_CLICK:\n      return {\n        ...nextState,\n        value: event.value,\n        navigationValue: null,\n      };\n    case SELECT_WITH_KEYBOARD:\n      return {\n        ...nextState,\n        value: data.navigationValue,\n        navigationValue: null,\n      };\n    case CLOSE_WITH_BUTTON:\n      return {\n        ...nextState,\n        navigationValue: null,\n      };\n    case INTERACT:\n      return nextState;\n    case FOCUS:\n      return {\n        ...nextState,\n        navigationValue: findNavigationValue(nextState, event),\n      };\n\n    default:\n      return nextState;\n  }\n};\n\nfunction popoverIsExpanded(state: State) {\n  return [SUGGESTING, NAVIGATING, INTERACTING].includes(state);\n}\n\n/**\n * When we open a list, set the navigation value to the value in the input, if\n * it's in the list, then it'll automatically be highlighted.\n *\n * @param stateData\n * @param event\n */\nfunction findNavigationValue(stateData: StateData, event: MachineEvent) {\n  // @ts-ignore\n  if (event.value) {\n    // @ts-ignore\n    return event.value;\n    // @ts-ignore\n  } else if (event.persistSelection) {\n    return stateData.value;\n  } else {\n    return null;\n  }\n}\n\nconst ComboboxDescendantContext = createDescendantContext<ComboboxDescendant>(\n  \"ComboboxDescendantContext\"\n);\nconst ComboboxContext = createNamedContext(\n  \"ComboboxContext\",\n  {} as InternalComboboxContextValue\n);\n\n// Allows us to put the option's value on context so that ComboboxOptionText\n// can work it's highlight text magic no matter what else is rendered around\n// it.\nconst OptionContext = createNamedContext(\n  \"OptionContext\",\n  {} as ComboboxOptionContextValue\n);\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Combobox\n *\n * @see Docs https://reach.tech/combobox#combobox\n */\nexport const Combobox = forwardRefWithAs<ComboboxProps, \"div\">(\n  function Combobox(\n    {\n      onSelect,\n      openOnFocus = false,\n      children,\n      as: Comp = \"div\",\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledby,\n      ...props\n    },\n    forwardedRef\n  ) {\n    let [options, setOptions] = useDescendantsInit<ComboboxDescendant>();\n\n    // Need this to focus it\n    const inputRef = React.useRef();\n\n    const popoverRef = React.useRef();\n\n    const buttonRef = React.useRef();\n\n    // When <ComboboxInput autocomplete={false} /> we don't want cycle back to\n    // the user's value while navigating (because it's always the user's value),\n    // but we need to know this in useKeyDown which is far away from the prop\n    // here, so we do something sneaky and write it to this ref on context so we\n    // can use it anywhere else 😛. Another new trick for me and I'm excited\n    // about this one too!\n    const autocompletePropRef = React.useRef();\n\n    const persistSelectionRef = React.useRef();\n\n    const defaultData: StateData = {\n      // The value the user has typed. We derive this also when the developer is\n      // controlling the value of ComboboxInput.\n      value: \"\",\n      // the value the user has navigated to with the keyboard\n      navigationValue: null,\n    };\n\n    const [state, data, transition] = useReducerMachine(\n      stateChart,\n      reducer,\n      defaultData\n    );\n\n    useFocusManagement(data.lastEventType, inputRef);\n\n    const id = useId(props.id);\n    const listboxId = id ? makeId(\"listbox\", id) : \"listbox\";\n\n    const context: InternalComboboxContextValue = {\n      ariaLabel,\n      ariaLabelledby,\n      autocompletePropRef,\n      buttonRef,\n      comboboxId: id,\n      data,\n      inputRef,\n      isExpanded: popoverIsExpanded(state),\n      listboxId,\n      onSelect: onSelect || noop,\n      openOnFocus,\n      persistSelectionRef,\n      popoverRef,\n      state,\n      transition,\n    };\n\n    useCheckStyles(\"combobox\");\n\n    return (\n      <DescendantProvider\n        context={ComboboxDescendantContext}\n        items={options}\n        set={setOptions}\n      >\n        <ComboboxContext.Provider value={context}>\n          <Comp {...props} data-reach-combobox=\"\" ref={forwardedRef}>\n            {isFunction(children)\n              ? children({ id, isExpanded: popoverIsExpanded(state) })\n              : children}\n          </Comp>\n        </ComboboxContext.Provider>\n      </DescendantProvider>\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/combobox#combobox-props\n */\nexport type ComboboxProps = {\n  /**\n   * @see Docs https://reach.tech/combobox#combobox-children\n   */\n  children:\n    | React.ReactNode\n    | ((props: ComboboxContextValue) => React.ReactNode);\n  /**\n   * Called with the selection value when the user makes a selection from the\n   * list.\n   *\n   * @see Docs https://reach.tech/combobox#combobox-onselect\n   */\n  onSelect?(value: ComboboxValue): void;\n  /**\n   * If true, the popover opens when focus is on the text box.\n   *\n   * @see Docs https://reach.tech/combobox#combobox-openonfocus\n   */\n  openOnFocus?: boolean;\n  /**\n   * Defines a string value that labels the current element.\n   * @see Docs https://reach.tech/combobox#accessibility\n   */\n  \"aria-label\"?: string;\n  /**\n   * Identifies the element (or elements) that labels the current element.\n   * @see Docs https://reach.tech/combobox#accessibility\n   */\n  \"aria-labelledby\"?: string;\n};\n\nif (__DEV__) {\n  Combobox.displayName = \"Combobox\";\n  Combobox.propTypes = {\n    as: PropTypes.any,\n    onSelect: PropTypes.func,\n    openOnFocus: PropTypes.bool,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxInput\n *\n * Wraps an `<input/>` with a couple extra props that work with the combobox.\n *\n * @see Docs https://reach.tech/combobox#comboboxinput\n */\nexport const ComboboxInput = forwardRefWithAs<ComboboxInputProps, \"input\">(\n  function ComboboxInput(\n    {\n      as: Comp = \"input\",\n      selectOnClick = false,\n      autocomplete = true,\n      onClick,\n      onChange,\n      onKeyDown,\n      onBlur,\n      onFocus,\n      value: controlledValue,\n      ...props\n    },\n    forwardedRef\n  ) {\n    // https://github.com/reach/reach-ui/issues/464\n    let { current: initialControlledValue } = React.useRef(controlledValue);\n    let controlledValueChangedRef = React.useRef(false);\n    useUpdateEffect(() => {\n      controlledValueChangedRef.current = true;\n    }, [controlledValue]);\n\n    let {\n      data: { navigationValue, value, lastEventType },\n      inputRef,\n      state,\n      transition,\n      listboxId,\n      autocompletePropRef,\n      openOnFocus,\n      isExpanded,\n      ariaLabel,\n      ariaLabelledby,\n    } = React.useContext(ComboboxContext);\n\n    let ref = useForkedRef(inputRef, forwardedRef);\n\n    // Because we close the List on blur, we need to track if the blur is\n    // caused by clicking inside the list, and if so, don't close the List.\n    let selectOnClickRef = React.useRef(false);\n\n    let handleKeyDown = useKeyDown();\n\n    let handleBlur = useBlur();\n\n    let isControlled = controlledValue != null;\n\n    // Layout effect should be SSR-safe here because we don't actually do\n    // anything with this ref that involves rendering until after we've\n    // let the client hydrate in nested components.\n    useIsomorphicLayoutEffect(() => {\n      autocompletePropRef.current = autocomplete;\n    }, [autocomplete, autocompletePropRef]);\n\n    const handleValueChange = React.useCallback(\n      (value: ComboboxValue) => {\n        if (value.trim() === \"\") {\n          transition(CLEAR);\n        } else if (\n          value === initialControlledValue &&\n          !controlledValueChangedRef.current\n        ) {\n          transition(INITIAL_CHANGE, { value });\n        } else {\n          transition(CHANGE, { value });\n        }\n      },\n      [initialControlledValue, transition]\n    );\n\n    React.useEffect(() => {\n      // If they are controlling the value we still need to do our transitions,\n      // so  we have this derived state to emulate onChange of the input as we\n      // receive new `value`s ...[*]\n      if (\n        isControlled &&\n        controlledValue !== value &&\n        // https://github.com/reach/reach-ui/issues/481\n        (controlledValue!.trim() === \"\" ? (value || \"\").trim() !== \"\" : true)\n      ) {\n        handleValueChange(controlledValue!);\n      }\n    }, [controlledValue, handleValueChange, isControlled, value]);\n\n    // [*]... and when controlled, we don't trigger handleValueChange as the\n    // user types, instead the developer controls it with the normal input\n    // onChange prop\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n      const { value } = event.target;\n      if (!isControlled) {\n        handleValueChange(value);\n      }\n    }\n\n    function handleFocus() {\n      if (selectOnClick) {\n        selectOnClickRef.current = true;\n      }\n\n      // If we select an option with click, useFocusManagement will focus the\n      // input, in those cases we don't want to cause the menu to open back up,\n      // so we guard behind these states.\n      if (openOnFocus && lastEventType !== SELECT_WITH_CLICK) {\n        transition(FOCUS);\n      }\n    }\n\n    function handleClick() {\n      if (selectOnClickRef.current) {\n        selectOnClickRef.current = false;\n        inputRef.current.select();\n      }\n    }\n\n    const inputValue =\n      autocomplete && (state === NAVIGATING || state === INTERACTING)\n        ? // When idle, we don't have a navigationValue on ArrowUp/Down\n          navigationValue || controlledValue || value\n        : controlledValue || value;\n\n    return (\n      <Comp\n        aria-activedescendant={\n          navigationValue ? String(makeHash(navigationValue)) : undefined\n        }\n        aria-autocomplete=\"both\"\n        aria-controls={listboxId}\n        aria-expanded={isExpanded}\n        aria-haspopup=\"listbox\"\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabel ? undefined : ariaLabelledby}\n        role=\"combobox\"\n        {...props}\n        data-reach-combobox-input=\"\"\n        ref={ref}\n        onBlur={wrapEvent(onBlur, handleBlur)}\n        onChange={wrapEvent(onChange, handleChange)}\n        onClick={wrapEvent(onClick, handleClick)}\n        onFocus={wrapEvent(onFocus, handleFocus)}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n        value={inputValue || \"\"}\n      />\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/combobox#comboboxinput-props\n */\nexport type ComboboxInputProps = {\n  /**\n   * If true, when the user clicks inside the text box the current value will\n   * be selected. Use this if the user is likely to delete all the text anyway\n   * (like the URL bar in browsers).\n   *\n   * However, if the user is likely to want to tweak the value, leave this\n   * false, like a google search--the user is likely wanting to edit their\n   * search, not replace it completely.\n   *\n   * @see Docs https://reach.tech/combobox#comboboxinput-selectonclick\n   */\n  selectOnClick?: boolean;\n  /**\n   * Determines if the value in the input changes or not as the user navigates\n   * with the keyboard. If true, the value changes, if false the value doesn't\n   * change.\n   *\n   * Set this to false when you don't really need the value from the input but\n   * want to populate some other state (like the recipient selector in Gmail).\n   * But if your input is more like a normal `<input type=\"text\"/>`, then leave\n   * the `true` default.\n   *\n   * @see Docs https://reach.tech/combobox#comboboxinput-autocomplete\n   */\n  autocomplete?: boolean;\n  /**\n   * @see Docs https://reach.tech/combobox#comboboxinput-value\n   */\n  value?: ComboboxValue;\n};\n\nif (__DEV__) {\n  ComboboxInput.displayName = \"ComboboxInput\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxPopover\n *\n * Contains the popup that renders the list. Because some UI needs to render\n * more than the list in the popup, you need to render one of these around the\n * list. For example, maybe you want to render the number of results suggested.\n *\n * @see Docs https://reach.tech/combobox#comboboxpopover\n */\nexport const ComboboxPopover = forwardRefWithAs<\n  ComboboxPopoverProps & Partial<PopoverProps>,\n  \"div\"\n>(function ComboboxPopover(\n  {\n    as: Comp = \"div\",\n    children,\n    portal = true,\n    onKeyDown,\n    onBlur,\n    position = positionMatchWidth,\n    ...props\n  },\n  forwardedRef: React.Ref<any>\n) {\n  const { popoverRef, inputRef, isExpanded } = React.useContext(\n    ComboboxContext\n  );\n  const ref = useForkedRef(popoverRef, forwardedRef);\n  const handleKeyDown = useKeyDown();\n  const handleBlur = useBlur();\n\n  const sharedProps = {\n    \"data-reach-combobox-popover\": \"\",\n    onKeyDown: wrapEvent<any>(onKeyDown, handleKeyDown),\n    onBlur: wrapEvent<any>(onBlur, handleBlur),\n    // Instead of conditionally rendering the popover we use the `hidden` prop\n    // because we don't want to unmount on close (from escape or onSelect).\n    // However, the developer can conditionally render the ComboboxPopover if\n    // they do want to cause mount/unmount based on the app's own data (like\n    // results.length or whatever).\n    hidden: !isExpanded,\n    tabIndex: -1,\n    children,\n  };\n\n  return portal ? (\n    <Popover\n      as={Comp}\n      {...props}\n      ref={ref}\n      position={position}\n      targetRef={inputRef}\n      {...sharedProps}\n    />\n  ) : (\n    <Comp ref={ref} {...props} {...sharedProps} />\n  );\n});\n\nif (__DEV__) {\n  ComboboxPopover.displayName = \"ComboboxPopover\";\n}\n\n/**\n * @see Docs https://reach.tech/combobox#comboboxpopover-props\n */\nexport type ComboboxPopoverProps = {\n  /**\n   * If you pass `<ComboboxPopover portal={false} />` the popover will not\n   * render inside of a portal, but in the same order as the React tree. This\n   * is mostly useful for styling the entire component together, like the pink\n   * focus outline in the example earlier in this page.\n   *\n   * @see Docs https://reach.tech/combobox#comboboxpopover-portal\n   */\n  portal?: boolean;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxList\n *\n * Contains the `ComboboxOption` elements and sets up the proper aria attributes\n * for the list.\n *\n * @see Docs https://reach.tech/combobox#comboboxlist\n */\nexport const ComboboxList = forwardRefWithAs<ComboboxListProps, \"ul\">(\n  function ComboboxList(\n    {\n      // when true, and the list opens again, the option with a matching value\n      // will be automatically highlighted.\n      persistSelection = false,\n      as: Comp = \"ul\",\n      ...props\n    },\n    forwardedRef\n  ) {\n    const { persistSelectionRef, listboxId } = React.useContext(\n      ComboboxContext\n    );\n\n    if (persistSelection) {\n      persistSelectionRef.current = true;\n    }\n\n    return (\n      <Comp\n        role=\"listbox\"\n        {...props}\n        ref={forwardedRef}\n        data-reach-combobox-list=\"\"\n        id={listboxId}\n      />\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/combobox#comboboxlist-props\n */\nexport type ComboboxListProps = {\n  /**\n   * Defaults to false. When true and the list is opened, if an option's value\n   * matches the value in the input, it will automatically be highlighted and\n   * be the starting point for any keyboard navigation of the list.\n   *\n   * This allows you to treat a Combobox more like a `<select>` than an\n   * `<input/>`, but be mindful that the user is still able to put any\n   * arbitrary value into the input, so if the only valid values for the input\n   * are from the list, your app will need to do that validation on blur or\n   * submit of the form.\n   *\n   * @see Docs https://reach.tech/combobox#comboboxlist-persistselection\n   */\n  persistSelection?: boolean;\n};\n\nif (__DEV__) {\n  ComboboxList.displayName = \"ComboboxList\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxOption\n *\n * An option that is suggested to the user as they interact with the combobox.\n *\n * @see Docs https://reach.tech/combobox#comboboxoption\n */\nexport const ComboboxOption = forwardRefWithAs<ComboboxOptionProps, \"li\">(\n  function ComboboxOption(\n    { as: Comp = \"li\", children, value, onClick, ...props },\n    forwardedRef: React.Ref<any>\n  ) {\n    const {\n      onSelect,\n      data: { navigationValue },\n      transition,\n    } = React.useContext(ComboboxContext);\n\n    let ownRef = React.useRef<HTMLElement | null>(null);\n    let ref = useForkedRef(forwardedRef, ownRef);\n\n    let index = useDescendant(\n      {\n        element: ownRef.current!,\n        value,\n      },\n      ComboboxDescendantContext\n    );\n\n    const isActive = navigationValue === value;\n\n    const handleClick = () => {\n      onSelect && onSelect(value);\n      transition(SELECT_WITH_CLICK, { value });\n    };\n\n    return (\n      <OptionContext.Provider value={{ value, index }}>\n        <Comp\n          aria-selected={isActive}\n          role=\"option\"\n          {...props}\n          data-reach-combobox-option=\"\"\n          ref={ref}\n          id={String(makeHash(value))}\n          data-highlighted={isActive ? \"\" : undefined}\n          // Without this the menu will close from `onBlur`, but with it the\n          // element can be `document.activeElement` and then our focus checks in\n          // onBlur will work as intended\n          tabIndex={-1}\n          onClick={wrapEvent(onClick, handleClick)}\n          children={children || <ComboboxOptionText />}\n        />\n      </OptionContext.Provider>\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/combobox#comboboxoption-props\n */\nexport type ComboboxOptionProps = {\n  /**\n   * Optional. If omitted, the `value` will be used as the children like as:\n   * `<ComboboxOption value=\"Seattle, Tacoma, Washington\" />`. But if you need\n   * to control a bit more, you can put whatever children you want, but make\n   * sure to render a `ComboboxOptionText` as well, so the value is still\n   * displayed with the text highlighting on the matched portions.\n   *\n   * @example\n   *   <ComboboxOption value=\"Apple\" />\n   *     🍎 <ComboboxOptionText />\n   *   </ComboboxOption>\n   *\n   * @see Docs https://reach.tech/combobox#comboboxoption-children\n   */\n  children?: React.ReactNode;\n  /**\n   * The value to match against when suggesting.\n   *\n   * @see Docs https://reach.tech/combobox#comboboxoption-value\n   */\n  value: string;\n};\n\nif (__DEV__) {\n  ComboboxOption.displayName = \"ComboboxOption\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxOptionText\n *\n * Renders the value of a `ComboboxOption` as text but with spans wrapping the\n * matching and non-matching segments of text.\n *\n * We don't forwardRef or spread props because we render multiple spans or null,\n * should be fine 🤙\n *\n * @example\n *   <ComboboxOption value=\"Seattle\">\n *     🌧 <ComboboxOptionText />\n *   </ComboboxOption>\n *\n * @see Docs https://reach.tech/combobox#comboboxoptiontext\n */\nexport function ComboboxOptionText() {\n  const { value } = React.useContext(OptionContext);\n  const {\n    data: { value: contextValue },\n  } = React.useContext(ComboboxContext);\n\n  const results = React.useMemo(\n    () =>\n      findAll({\n        searchWords: escapeRegexp(contextValue || \"\").split(/\\s+/),\n        textToHighlight: value,\n      }),\n    [contextValue, value]\n  );\n\n  return (\n    <>\n      {results.length\n        ? results.map((result, index) => {\n            const str = value.slice(result.start, result.end);\n            return (\n              <span\n                key={index}\n                data-user-value={result.highlight ? true : undefined}\n                data-suggested-value={result.highlight ? undefined : true}\n              >\n                {str}\n              </span>\n            );\n          })\n        : value}\n    </>\n  );\n}\n\nif (__DEV__) {\n  ComboboxOptionText.displayName = \"ComboboxOptionText\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxButton\n */\nexport const ComboboxButton = forwardRefWithAs<ComboboxButtonProps, \"button\">(\n  function ComboboxButton(\n    { as: Comp = \"button\", onClick, onKeyDown, ...props },\n    forwardedRef\n  ) {\n    const {\n      transition,\n      state,\n      buttonRef,\n      listboxId,\n      isExpanded,\n    } = React.useContext(ComboboxContext);\n    const ref = useForkedRef(buttonRef, forwardedRef);\n\n    const handleKeyDown = useKeyDown();\n\n    const handleClick = () => {\n      if (state === IDLE) {\n        transition(OPEN_WITH_BUTTON);\n      } else {\n        transition(CLOSE_WITH_BUTTON);\n      }\n    };\n\n    return (\n      <Comp\n        aria-controls={listboxId}\n        aria-haspopup=\"listbox\"\n        aria-expanded={isExpanded}\n        {...props}\n        data-reach-combobox-button=\"\"\n        ref={ref}\n        onClick={wrapEvent(onClick, handleClick)}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n      />\n    );\n  }\n);\n\nexport type ComboboxButtonProps = {};\n\nif (__DEV__) {\n  ComboboxButton.displayName = \"ComboboxButton\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Move focus back to the input if we start navigating w/ the\n * keyboard after focus has moved to any focusable content in\n * the popup.\n *\n * @param lastEventType\n * @param inputRef\n */\nfunction useFocusManagement(\n  lastEventType: MachineEventType | undefined,\n  inputRef: React.MutableRefObject<any>\n) {\n  // useLayoutEffect so that the cursor goes to the end of the input instead\n  // of awkwardly at the beginning, unclear to me why 🤷‍♂️\n  //\n  // Should be safe to use here since we're just focusing an input.\n  useIsomorphicLayoutEffect(() => {\n    if (\n      lastEventType === NAVIGATE ||\n      lastEventType === ESCAPE ||\n      lastEventType === SELECT_WITH_CLICK ||\n      lastEventType === OPEN_WITH_BUTTON\n    ) {\n      inputRef.current.focus();\n    }\n  }, [inputRef, lastEventType]);\n}\n\n/**\n * We want the same events when the input or the popup have focus (HOW COOL ARE\n * HOOKS BTW?) This is probably the hairiest piece but it's not bad.\n */\nfunction useKeyDown() {\n  const {\n    data: { navigationValue },\n    onSelect,\n    state,\n    transition,\n    autocompletePropRef,\n    persistSelectionRef,\n  } = React.useContext(ComboboxContext);\n\n  const options = useDescendants(ComboboxDescendantContext);\n\n  return function handleKeyDown(event: React.KeyboardEvent) {\n    let index = options.findIndex(({ value }) => value === navigationValue);\n\n    function getNextOption() {\n      let atBottom = index === options.length - 1;\n      if (atBottom) {\n        if (autocompletePropRef.current) {\n          // Go back to the value the user has typed because we are\n          // autocompleting and they need to be able to get back to what\n          // they had typed w/o having to backspace out.\n          return null;\n        } else {\n          // cycle through\n          return getFirstOption();\n        }\n      } else {\n        // Go to the next item in the list\n        return options[(index + 1) % options.length];\n      }\n    }\n\n    function getPreviousOption() {\n      let atTop = index === 0;\n      if (atTop) {\n        if (autocompletePropRef.current) {\n          // Go back to the value the user has typed because we are\n          // autocompleting and they need to be able to get back to what\n          // they had typed w/o having to backspace out.\n          return null;\n        } else {\n          // cycle through\n          return getLastOption();\n        }\n      } else if (index === -1) {\n        // displaying the user's value, so go select the last one\n        return getLastOption();\n      } else {\n        // normal case, select previous\n        return options[(index - 1 + options.length) % options.length];\n      }\n    }\n\n    function getFirstOption() {\n      return options[0];\n    }\n\n    function getLastOption() {\n      return options[options.length - 1];\n    }\n\n    switch (event.key) {\n      case \"ArrowDown\":\n        // Don't scroll the page\n        event.preventDefault();\n        if (!options || !options.length) {\n          return;\n        }\n\n        if (state === IDLE) {\n          // Opening a closed list\n          transition(NAVIGATE, {\n            persistSelection: persistSelectionRef.current,\n          });\n        } else {\n          let next = getNextOption();\n          transition(NAVIGATE, { value: next ? next.value : null });\n        }\n        break;\n\n      // A lot of duplicate code with ArrowDown up next, I'm already over it.\n      case \"ArrowUp\":\n        // Don't scroll the page\n        event.preventDefault();\n        if (!options || options.length === 0) {\n          return;\n        }\n\n        if (state === IDLE) {\n          transition(NAVIGATE);\n        } else {\n          let prev = getPreviousOption();\n          transition(NAVIGATE, { value: prev ? prev.value : null });\n        }\n        break;\n\n      case \"Home\":\n      case \"PageUp\":\n        // Don't scroll the page\n        event.preventDefault();\n        if (!options || options.length === 0) {\n          return;\n        }\n\n        if (state === IDLE) {\n          transition(NAVIGATE);\n        } else {\n          transition(NAVIGATE, { value: getFirstOption().value });\n        }\n        break;\n\n      case \"End\":\n      case \"PageDown\":\n        // Don't scroll the page\n        event.preventDefault();\n        if (!options || options.length === 0) {\n          return;\n        }\n\n        if (state === IDLE) {\n          transition(NAVIGATE);\n        } else {\n          transition(NAVIGATE, { value: getLastOption().value });\n        }\n        break;\n\n      case \"Escape\":\n        if (state !== IDLE) {\n          transition(ESCAPE);\n        }\n        break;\n      case \"Enter\":\n        if (state === NAVIGATING && navigationValue !== null) {\n          // don't want to submit forms\n          event.preventDefault();\n          onSelect && onSelect(navigationValue);\n          transition(SELECT_WITH_KEYBOARD);\n        }\n        break;\n    }\n  };\n}\n\nfunction useBlur() {\n  const {\n    state,\n    transition,\n    popoverRef,\n    inputRef,\n    buttonRef,\n  } = React.useContext(ComboboxContext);\n  const rafIds = useLazyRef(() => new Set<number>());\n\n  React.useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      rafIds.current.forEach((id) => cancelAnimationFrame(id));\n    };\n  }, [rafIds]);\n\n  return function handleBlur() {\n    const ownerDocument = getOwnerDocument(popoverRef.current);\n    if (!ownerDocument) {\n      return;\n    }\n\n    let rafId = requestAnimationFrame(() => {\n      // we on want to close only if focus propss outside the combobox\n      if (\n        ownerDocument.activeElement !== inputRef.current &&\n        ownerDocument.activeElement !== buttonRef.current &&\n        popoverRef.current\n      ) {\n        if (popoverRef.current.contains(ownerDocument.activeElement)) {\n          // focus landed inside the combobox, keep it open\n          if (state !== INTERACTING) {\n            transition(INTERACT);\n          }\n        } else {\n          // focus landed outside the combobox, close it.\n          transition(BLUR);\n        }\n      }\n    });\n    rafIds.current.add(rafId);\n  };\n}\n\n/**\n * This manages transitions between states with a built in reducer to manage\n * the data that goes with those transitions.\n *\n * @param chart\n * @param reducer\n * @param initialData\n */\nfunction useReducerMachine(\n  chart: StateChart,\n  reducer: Reducer,\n  initialData: Partial<StateData>\n): [State, StateData, Transition] {\n  const [state, setState] = React.useState(chart.initial);\n  const [data, dispatch] = React.useReducer(reducer, initialData);\n\n  const transition: Transition = (event, payload = {}) => {\n    const currentState = chart.states[state];\n    const nextState = currentState && currentState.on[event];\n    if (nextState) {\n      dispatch({ type: event, state, nextState: state, ...payload });\n      setState(nextState);\n      return;\n    }\n  };\n\n  return [state, data, transition];\n}\n\n/**\n * We don't want to track the active descendant with indexes because nothing is\n * more annoying in a combobox than having it change values RIGHT AS YOU HIT\n * ENTER. That only happens if you use the index as your data, rather than\n * *your data as your data*. We use this to generate a unique ID based on the\n * value of each item.  This function is short, sweet, and good enough™ (I also\n * don't know how it works, tbqh)\n *\n * @see https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript\n * @param str\n */\nconst makeHash = (str: string) => {\n  let hash = 0;\n  if (str.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < str.length; i++) {\n    var char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash;\n  }\n  return hash;\n};\n\n/**\n * Escape regexp special characters in `str`\n *\n * @see https://github.com/component/escape-regexp/blob/5ce923c1510c9802b3da972c90b6861dd2829b6b/index.js\n * @param str\n */\n\nexport function escapeRegexp(str: string) {\n  return String(str).replace(/([.*+?=^!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Combobox` component to its descendants.\n *\n * @see Docs https://reach.tech/combobox#usecomboboxcontext\n */\nexport function useComboboxContext(): ComboboxContextValue {\n  let { isExpanded, comboboxId } = React.useContext(ComboboxContext);\n  return React.useMemo(\n    () => ({\n      id: comboboxId,\n      isExpanded,\n    }),\n    [comboboxId, isExpanded]\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Well alright, you made it all the way here to like 1100 lines of code (geez,\n// what the heck?). Have a great day :D\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\nexport type ComboboxContextValue = {\n  id: string | undefined;\n  isExpanded: boolean;\n};\n\ntype ComboboxDescendant = Descendant<HTMLElement> & {\n  value: ComboboxValue;\n};\n\ninterface ComboboxOptionContextValue {\n  value: ComboboxValue;\n  index: number;\n}\n\ninterface InternalComboboxContextValue {\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n  autocompletePropRef: React.MutableRefObject<any>;\n  buttonRef: React.MutableRefObject<any>;\n  comboboxId: string | undefined;\n  data: StateData;\n  inputRef: React.MutableRefObject<any>;\n  isExpanded: boolean;\n  listboxId: string;\n  onSelect(value?: ComboboxValue): any;\n  openOnFocus: boolean;\n  persistSelectionRef: React.MutableRefObject<any>;\n  popoverRef: React.MutableRefObject<any>;\n  state: State;\n  transition: Transition;\n}\n\ntype Transition = (event: MachineEventType, payload?: any) => any;\n\ntype ComboboxValue = string;\n\ntype State = \"IDLE\" | \"SUGGESTING\" | \"NAVIGATING\" | \"INTERACTING\";\n\ntype MachineEventType =\n  | \"CLEAR\"\n  | \"CHANGE\"\n  | \"INITIAL_CHANGE\"\n  | \"NAVIGATE\"\n  | \"SELECT_WITH_KEYBOARD\"\n  | \"SELECT_WITH_CLICK\"\n  | \"ESCAPE\"\n  | \"BLUR\"\n  | \"INTERACT\"\n  | \"FOCUS\"\n  | \"OPEN_WITH_BUTTON\"\n  | \"CLOSE_WITH_BUTTON\";\n\ninterface StateChart {\n  initial: State;\n  states: {\n    [key in State]?: {\n      on: {\n        [key in MachineEventType]?: State;\n      };\n    };\n  };\n}\n\ntype StateData = {\n  lastEventType?: MachineEventType;\n  navigationValue?: ComboboxValue | null;\n  value?: ComboboxValue | null;\n};\n\ntype MachineEvent =\n  | { type: \"BLUR\" }\n  | { type: \"CHANGE\"; value: ComboboxValue }\n  | { type: \"INITIAL_CHANGE\"; value: ComboboxValue }\n  | { type: \"CLEAR\" }\n  | { type: \"CLOSE_WITH_BUTTON\" }\n  | { type: \"ESCAPE\" }\n  | { type: \"FOCUS\" }\n  | { type: \"INTERACT\" }\n  | {\n      type: \"NAVIGATE\";\n      persistSelection?: React.MutableRefObject<any>;\n      value: ComboboxValue;\n    }\n  | { type: \"OPEN_WITH_BUTTON\" }\n  | {\n      type: \"SELECT_WITH_CLICK\";\n      value: ComboboxValue;\n    }\n  | {\n      type: \"SELECT_WITH_KEYBOARD\";\n    };\n\ntype Reducer = (data: StateData, event: MachineEvent) => StateData;\n"],"names":["IDLE","SUGGESTING","NAVIGATING","INTERACTING","stateChart","initial","states","on","reducer","data","event","nextState","lastEventType","type","navigationValue","value","findNavigationValue","popoverIsExpanded","state","includes","stateData","persistSelection","ComboboxDescendantContext","createDescendantContext","ComboboxContext","createNamedContext","OptionContext","Combobox","forwardRefWithAs","forwardedRef","onSelect","openOnFocus","children","as","Comp","ariaLabel","ariaLabelledby","props","useDescendantsInit","options","setOptions","inputRef","React","popoverRef","buttonRef","autocompletePropRef","persistSelectionRef","chart","initialData","setState","dispatch","payload","currentState","useReducerMachine","transition","useIsomorphicLayoutEffect","current","focus","useFocusManagement","id","useId","listboxId","makeId","context","comboboxId","isExpanded","noop","useCheckStyles","DescendantProvider","items","set","Provider","ref","isFunction","ComboboxInput","selectOnClick","autocomplete","onClick","onChange","onKeyDown","onBlur","onFocus","controlledValue","initialControlledValue","controlledValueChangedRef","useUpdateEffect","useForkedRef","selectOnClickRef","handleKeyDown","useKeyDown","handleBlur","useBlur","isControlled","handleValueChange","trim","inputValue","String","makeHash","undefined","role","wrapEvent","target","select","ComboboxPopover","portal","position","positionMatchWidth","sharedProps","hidden","tabIndex","Popover","targetRef","ComboboxList","ComboboxOption","ownRef","index","useDescendant","element","isActive","ComboboxOptionText","contextValue","results","findAll","searchWords","escapeRegexp","split","textToHighlight","length","map","result","str","slice","start","end","key","highlight","ComboboxButton","useDescendants","findIndex","getFirstOption","getLastOption","preventDefault","next","prev","rafIds","useLazyRef","Set","forEach","cancelAnimationFrame","ownerDocument","getOwnerDocument","rafId","requestAnimationFrame","activeElement","contains","add","hash","i","charCodeAt","replace"],"mappings":"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"}